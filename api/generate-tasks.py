"""API endpoint to trigger task generation using ChatGPT."""

import os
import sys
import json
import logging
from http.server import BaseHTTPRequestHandler

# Add src to Python path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from task_generator import TaskGenerator


# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class handler(BaseHTTPRequestHandler):
    def do_POST(self):
        """Handle POST requests to generate new tasks."""
        try:
            # Check for protection secret
            secret = self.headers.get('x-protection-secret')
            expected_secret = os.getenv('VERCEL_PROTECTION_SECRET')
            
            if expected_secret and secret != expected_secret:
                self._send_error(401, "Unauthorized")
                return

            logger.info("Starting task generation cycle...")
            
            # Initialize task generator
            task_generator = TaskGenerator()
            
            # Generate tasks
            result = task_generator.generate_tasks()
            
            # Log the result
            if result["success"]:
                logger.info(f"Task generation successful: {result['added_count']} tasks added")
            else:
                logger.error(f"Task generation failed: {result.get('error', 'Unknown error')}")
            
            # Send response
            self._send_json_response(result)

        except Exception as e:
            logger.error(f"Error in task generation endpoint: {str(e)}")
            self._send_error(500, f"Internal server error: {str(e)}")

    def do_GET(self):
        """Handle GET requests - return endpoint info."""
        try:
            # Check for protection secret
            secret = self.headers.get('x-protection-secret')
            expected_secret = os.getenv('VERCEL_PROTECTION_SECRET')
            
            if expected_secret and secret != expected_secret:
                self._send_error(401, "Unauthorized")
                return

            response_data = {
                "success": True,
                "message": "Task generation endpoint",
                "description": "POST to this endpoint to trigger ChatGPT-based task generation",
                "usage": {
                    "method": "POST",
                    "headers": {
                        "x-protection-secret": "required"
                    },
                    "response": {
                        "success": "boolean",
                        "generated_count": "number of tasks generated by ChatGPT",
                        "added_count": "number of tasks successfully added to database",
                        "tasks": "array of generated task objects",
                        "error": "error message if failed"
                    }
                }
            }
            
            self._send_json_response(response_data)

        except Exception as e:
            logger.error(f"Error in GET handler: {str(e)}")
            self._send_error(500, f"Internal server error: {str(e)}")

    def _send_json_response(self, data):
        """Send a JSON response."""
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type, x-protection-secret')
        self.end_headers()
        self.wfile.write(json.dumps(data, indent=2).encode('utf-8'))

    def _send_error(self, status_code, message):
        """Send an error response."""
        self.send_response(status_code)
        self.send_header('Content-type', 'application/json')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.end_headers()
        error_data = {"success": False, "error": message}
        self.wfile.write(json.dumps(error_data, indent=2).encode('utf-8'))

    def do_OPTIONS(self):
        """Handle CORS preflight requests."""
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type, x-protection-secret')
        self.end_headers() 