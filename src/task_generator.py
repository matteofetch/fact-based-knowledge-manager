"""Task Generator for creating new tasks using ChatGPT."""

import logging
import json
from typing import List, Dict, Any, Optional
from src.chatgpt_service import ChatGPTService
from src.supabase_service import SupabaseService
from src.hardcoded_data import get_guidelines


logger = logging.getLogger(__name__)


class TaskGenerator:
    """Generates new tasks using ChatGPT based on knowledge base and guidelines."""

    def __init__(self):
        self.chatgpt_service = ChatGPTService()
        self.supabase_service = SupabaseService()

    def generate_tasks(self) -> Dict[str, Any]:
        """Generate new tasks using ChatGPT and add them to the database.
        
        Returns:
            Dictionary with success status, generated tasks, and any errors
        """
        try:
            # Get current knowledge base
            knowledge_base = self.supabase_service.fetch_knowledge_base()
            if not knowledge_base:
                logger.warning("Could not fetch knowledge base, using fallback")
                from src.hardcoded_data import get_knowledge_base
                knowledge_base = get_knowledge_base()

            # Get guidelines
            guidelines = get_guidelines()

            # Get existing tasks
            existing_tasks = self.supabase_service.fetch_tasks()

            # Generate tasks using ChatGPT
            generated_tasks = self._call_chatgpt_for_tasks(
                knowledge_base, guidelines, existing_tasks
            )

            if not generated_tasks:
                return {
                    "success": False,
                    "error": "No tasks generated by ChatGPT",
                    "generated_count": 0
                }

            # Add generated tasks to database
            added_count = self._add_tasks_to_database(generated_tasks)

            return {
                "success": True,
                "generated_count": len(generated_tasks),
                "added_count": added_count,
                "tasks": generated_tasks
            }

        except Exception as e:
            logger.error(f"Error in task generation: {e}")
            return {
                "success": False,
                "error": str(e),
                "generated_count": 0
            }

    def _call_chatgpt_for_tasks(
        self, 
        knowledge_base, 
        guidelines: str, 
        existing_tasks: List[Dict[str, Any]]
    ) -> List[Dict[str, str]]:
        """Call ChatGPT to generate new tasks."""
        try:
            # Format existing tasks for context
            existing_tasks_text = ""
            if existing_tasks:
                existing_tasks_text = "EXISTING TASKS:\n"
                for task in existing_tasks:
                    existing_tasks_text += f"- {task['title']} (Status: {task['status']})\n"
            else:
                existing_tasks_text = "EXISTING TASKS: None"

            # Format knowledge base
            kb_text = ""
            if knowledge_base and knowledge_base.facts:
                kb_text = "CURRENT KNOWLEDGE BASE:\n"
                for fact in knowledge_base.facts:
                    kb_text += f"| **{fact.number}** | {fact.description} | {fact.last_validated} |\n"
            else:
                kb_text = "CURRENT KNOWLEDGE BASE: Empty"

            # Create prompt for task generation
            prompt = f"""You are a knowledge management assistant. Based on the current knowledge base, guidelines, and existing tasks, generate 3-5 new tasks that would help maintain and improve the knowledge base.

{guidelines}

{kb_text}

{existing_tasks_text}

Please generate new tasks that would be valuable for maintaining this knowledge base. Focus on:
1. Validating outdated information
2. Filling knowledge gaps
3. Updating metrics and data
4. Researching missing information

Return your response as a JSON array of task objects, where each task has a "title" field. Example:
[
  {{"title": "Validate current user count metrics"}},
  {{"title": "Research latest partnership developments"}},
  {{"title": "Update financial performance data"}}
]

Only return the JSON array, no other text."""

            # Call ChatGPT
            response = self.chatgpt_service.call_chatgpt(prompt)
            
            if not response:
                logger.error("Empty response from ChatGPT")
                return []

            # Parse JSON response
            try:
                tasks = json.loads(response)
                if isinstance(tasks, list):
                    # Validate task format
                    valid_tasks = []
                    for task in tasks:
                        if isinstance(task, dict) and "title" in task and task["title"].strip():
                            valid_tasks.append({"title": task["title"].strip()})
                    
                    logger.info(f"Generated {len(valid_tasks)} valid tasks from ChatGPT")
                    return valid_tasks
                else:
                    logger.error("ChatGPT response is not a list")
                    return []
            
            except json.JSONDecodeError as e:
                logger.error(f"Failed to parse ChatGPT response as JSON: {e}")
                logger.error(f"Response was: {response}")
                return []

        except Exception as e:
            logger.error(f"Error calling ChatGPT for tasks: {e}")
            return []

    def _add_tasks_to_database(self, tasks: List[Dict[str, str]]) -> int:
        """Add generated tasks to the database.
        
        Args:
            tasks: List of task dictionaries with 'title' field
            
        Returns:
            Number of tasks successfully added
        """
        if not self.supabase_service.client:
            logger.error("No Supabase client available")
            return 0

        added_count = 0
        
        for task in tasks:
            try:
                # Insert task into database
                self.supabase_service.client.table("tasks").insert({
                    "title": task["title"],
                    "status": "pending"
                }).execute()
                
                added_count += 1
                logger.info(f"Added task: {task['title']}")
                
            except Exception as e:
                logger.error(f"Failed to add task '{task['title']}': {e}")

        logger.info(f"Successfully added {added_count} out of {len(tasks)} tasks")
        return added_count 